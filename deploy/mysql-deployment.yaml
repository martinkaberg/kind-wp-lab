apiVersion: apps/v1
kind: Deployment  # Provides a declarative updates for pods and replica sets
metadata:
  name: wordpress-mysql # Name of the deployment,  this will also be the prefix name of pods created by this deployment
  labels:
    app: wordpress
spec:
  selector: # The .spec.selector field defines how the created ReplicaSet finds which Pods to manage.
    matchLabels:
      app: wordpress
      tier: mysql
  strategy:
    type: Recreate # specifies the strategy used to replace old Pods by new ones. .spec.strategy.type can be "Recreate" or "RollingUpdate". "RollingUpdate" is the default value.
  template: # This is the template of what the pods created by the deployment looks like
    metadata:
      labels: # These must match the selector in the deployment.spec
        app: wordpress
        tier: mysql
    spec:
      containers:
      - image: mysql:8.0 # This is the container image name in the registry. If a private registry its used the fqdn is required
        name: mysql # What we name our container in the pod
        env: # Environment variables to be set in container
        - name: MYSQL_ROOT_PASSWORD
          value: wordpress # Insecure way of passing secrets,  instead valueFrom.secretKeyRef should be used
        - name: MYSQL_DATABASE
          value: wordpress
        - name: MYSQL_USER
          value: wordpress
        - name: MYSQL_PASSWORD
          value: wordpress
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts: # Where volumes are mounted
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage # Our volume name in pod
        persistentVolumeClaim:
          claimName: mysql-pv-claim # The pvc we created earlier